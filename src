#include <stdio.h>
#include <stdlib.h>

int main() {
    FILE *image_file = fopen("image.bmp", "rb");
    if (!image_file) {
        printf("Error opening file.\n");
        return 1;
    }

    int width, height, bmpdataoff, bmpsize;
    fseek(image_file, 10, SEEK_SET);
    fread(&bmpdataoff, 4, 1, image_file);
    fseek(image_file, 18, SEEK_SET);
    fread(&width, 4, 1, image_file);
    fread(&height, 4, 1, image_file);
    fseek(image_file, 2, SEEK_SET);
    fread(&bmpsize, 4, 1, image_file);

    printf("Width: %d, Height: %d, Data Offset: %d, File Size: %d\n", width, height, bmpdataoff, bmpsize);

    // Allocate memory for the image
    int **image = (int **)malloc(height * sizeof(int *));
    for (int i = 0; i < height; i++) {
        image[i] = (int *)malloc(width * sizeof(int));
    }

    // Move to pixel data
    fseek(image_file, bmpdataoff, SEEK_SET);
    
    // BMP rows are stored bottom-to-top, so read in reverse order
    int padding = (4 - (width * 3) % 4) % 4; // BMP rows are padded to multiples of 4 bytes
    unsigned char pixel[3];

    for (int i = height - 1; i >= 0; i--) {
        for (int j = 0; j < width; j++) {
            fread(pixel, 3, 1, image_file);
            image[i][j] = pixel[0]; // Store only the blue channel (Modify for grayscale or RGB)
        }
        fseek(image_file, padding, SEEK_CUR); // Skip padding
    }

    fclose(image_file);

    // Print part of the image for debugging
    for (int i = 0; i < height && i < 10; i++) {  // Limit output to 10 rows
        for (int j = 0; j < width && j < 10; j++) {  // Limit to 10 columns
            printf("%3d ", image[i][j]);
        }
        printf("\n");
    }

    // Free memory
    for (int i = 0; i < height; i++) {
        free(image[i]);
    }
    free(image);

    return 0;
}
